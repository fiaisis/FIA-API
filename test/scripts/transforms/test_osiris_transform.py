"""Test Case for osiris transforms"""

# pylint: disable = line-too-long
from unittest.mock import Mock

from fia_api.scripts.pre_script import PreScript
from fia_api.scripts.transforms.osiris_transform import OsirisTransform

SCRIPT = """# import mantid algorithms, numpy and matplotlib
from mantid.simpleapi import *
import matplotlib.pyplot as plt
import numpy as np


def generate_input_path_for_run(run_number, cycle):
    return f"/archive/ndxosiris/Instrument/data/{cycle}/OSI{run_number}.nxs"

# To change by automatic script
input_runs = ["108538", "108539"]
# This needs to be loaded from a shared repository of files
calibration_file_path = "/extras/osi92682_multi_graphite002_calib.nxs"
cycle = "cycle_14_1"
analyser = "graphite"
reflection = "002"
spectroscopy_reduction = True
diffraction_reduction = True

# Defaults
instrument = "OSIRIS"
workspace_start_of_file = ""
efixed = 1.845
spec_spectra_range = "963,1004"
diff_spectra_range = '3,962'
# Grouping string is for 14 groups, and generated by the UI for indirect data reduction and based on spectra_range
grouping_string = "963-965,966-968,969-971,972-974,975-977,978-980,981-983,984-986,987-989,990-992,993-995,996-998,999-1001,1002-1004"
unit_x = "DeltaE"
fold_multiple_frames = False

# Generated
sum_runs = len(input_runs) > 1

input_file_paths = ""
for input_run in input_runs:
    input_file_paths += ", " + generate_input_path_for_run(input_run, cycle)
input_file_paths = input_file_paths[2:]  # Slice out the excess ", "
print(input_file_paths)

output_workspaces = []

# Perform the reduction
if spectroscopy_reduction:
    output_workspace_prefix = instrument
    for input_run in input_runs:
        output_workspace_prefix += input_run + ", "
    output_workspace_prefix = output_workspace_prefix[:-2] + f"_{analyser}_{reflection}_Reduced"  # Slice out the excess ", " and finalize prefix

    print("Producing a spectroscopy reduction")
    # Load calibration workspace
    calibration_workspace = Load(calibration_file_path)

    print("Reducing all")
    output_spec_ws_all = ISISIndirectEnergyTransferWrapper(OutputWorkspace=output_workspace_prefix + "-all", GroupingMethod="All", InputFiles=input_file_paths, SumFiles=sum_runs, CalibrationWorkspace=calibration_workspace, Instrument=instrument, Analyser=analyser, Reflection=reflection, EFixed=efixed, SpectraRange=spec_spectra_range, FoldMultipleFrames=fold_multiple_frames, UnitX=unit_x)

    print("Reducing using groups")
    output_spec_ws_grouping = ISISIndirectEnergyTransferWrapper(OutputWorkspace=output_workspace_prefix + "-groups", GroupingMethod="Custom", GroupingString=grouping_string, InputFiles=input_file_paths, SumFiles=sum_runs, CalibrationWorkspace=calibration_workspace, Instrument=instrument, Analyser=analyser, Reflection=reflection, EFixed=efixed, SpectraRange=spec_spectra_range, FoldMultipleFrames=fold_multiple_frames, UnitX=unit_x)

    print("Reducing individual")
    output_spec_ws_individual = ISISIndirectEnergyTransferWrapper(OutputWorkspace=output_workspace_prefix + "-individual", GroupingMethod="Individual", InputFiles=input_file_paths, SumFiles=sum_runs, CalibrationWorkspace=calibration_workspace, Instrument=instrument, Analyser=analyser, Reflection=reflection, EFixed=efixed, SpectraRange=spec_spectra_range, FoldMultipleFrames=fold_multiple_frames, UnitX=unit_x)

    output_workspaces.append(output_spec_ws_all)
    output_workspaces.append(output_spec_ws_grouping)
    output_workspaces.append(output_spec_ws_individual)

if diffraction_reduction:
    print("Producing a spectroscopy reduction")
    # If diffonly then cal file and vanadium runs are required for this, else they can be turned off. diffspec also has an optional Rebin in D Spacing option.
    if spectroscopy_reduction:
        reflection = "diffspec"
        output_ws = ISISIndirectDiffractionReduction(InputFiles=input_file_paths, CalFile=calibration_file_path, Instrument=instrument, SpectraRange=diff_spectra_range, OutputWorkspace=f"{instrument}{input_runs[0]}_diffspec_red")
        output_workspaces.append(output_ws)
    else:
        for run_number in input_runs:
            ws_name = instrument + run_number
            drange_ws = OSIRISDiffractionReduction(Sample=ws_name, CalFile=calibration_file_path, OutputWorkspace=f'{ws_name}_dRange')
            q_ws = ConvertUnits(InputWorkspace=drange_ws, OutputWorkspace=f'{ws_name}_q', Target='QSquared')
            tof_ws = ConvertUnits(InputWorkspace=drange_ws, OutputWorkspace=f'{ws_name}_tof', Target='TOF')
            output_workspaces.append(drange_ws)
            output_workspaces.append(q_ws)
            output_workspaces.append(tof_ws)

for workspace in output_workspaces:
    save_file_name = f"{output_ws.name()}.nxs"
    save_path = f"/output/"
    SaveNexusProcessed(workspace, f"{save_path}{save_file_name}")"""


def create_expected_script(
    input_runs,
    calibration_file_path,
    cycle,
    reflection,
    spectroscopy_reduction,
    diffraction_reduction,
) -> str:
    """Generate an expected script for assertion"""
    return f"""# import mantid algorithms, numpy and matplotlib
from mantid.simpleapi import *
import matplotlib.pyplot as plt
import numpy as np


def generate_input_path_for_run(run_number, cycle):
    return f"/archive/ndxosiris/Instrument/data/{{cycle}}/OSI{{run_number}}.nxs"

# To change by automatic script
input_runs = {input_runs}
# This needs to be loaded from a shared repository of files
calibration_file_path = "{calibration_file_path}"
cycle = "{cycle}"
analyser = "graphite"
reflection = "{reflection}"
spectroscopy_reduction = {spectroscopy_reduction}
diffraction_reduction = {diffraction_reduction}

# Defaults
instrument = "OSIRIS"
workspace_start_of_file = ""
efixed = 1.845
spec_spectra_range = "963,1004"
diff_spectra_range = '3,962'
# Grouping string is for 14 groups, and generated by the UI for indirect data reduction and based on spectra_range
grouping_string = "963-965,966-968,969-971,972-974,975-977,978-980,981-983,984-986,987-989,990-992,993-995,996-998,999-1001,1002-1004"
unit_x = "DeltaE"
fold_multiple_frames = False

# Generated
sum_runs = len(input_runs) > 1

input_file_paths = ""
for input_run in input_runs:
    input_file_paths += ", " + generate_input_path_for_run(input_run, cycle)
input_file_paths = input_file_paths[2:]  # Slice out the excess ", "
print(input_file_paths)

output_workspaces = []

# Perform the reduction
if spectroscopy_reduction:
    output_workspace_prefix = instrument
    for input_run in input_runs:
        output_workspace_prefix += input_run + ", "
    output_workspace_prefix = output_workspace_prefix[:-2] + f"_{{analyser}}_{{reflection}}_Reduced"  # Slice out the excess ", " and finalize prefix

    print("Producing a spectroscopy reduction")
    # Load calibration workspace
    calibration_workspace = Load(calibration_file_path)

    print("Reducing all")
    output_spec_ws_all = ISISIndirectEnergyTransferWrapper(OutputWorkspace=output_workspace_prefix + "-all", GroupingMethod="All", InputFiles=input_file_paths, SumFiles=sum_runs, CalibrationWorkspace=calibration_workspace, Instrument=instrument, Analyser=analyser, Reflection=reflection, EFixed=efixed, SpectraRange=spec_spectra_range, FoldMultipleFrames=fold_multiple_frames, UnitX=unit_x)

    print("Reducing using groups")
    output_spec_ws_grouping = ISISIndirectEnergyTransferWrapper(OutputWorkspace=output_workspace_prefix + "-groups", GroupingMethod="Custom", GroupingString=grouping_string, InputFiles=input_file_paths, SumFiles=sum_runs, CalibrationWorkspace=calibration_workspace, Instrument=instrument, Analyser=analyser, Reflection=reflection, EFixed=efixed, SpectraRange=spec_spectra_range, FoldMultipleFrames=fold_multiple_frames, UnitX=unit_x)

    print("Reducing individual")
    output_spec_ws_individual = ISISIndirectEnergyTransferWrapper(OutputWorkspace=output_workspace_prefix + "-individual", GroupingMethod="Individual", InputFiles=input_file_paths, SumFiles=sum_runs, CalibrationWorkspace=calibration_workspace, Instrument=instrument, Analyser=analyser, Reflection=reflection, EFixed=efixed, SpectraRange=spec_spectra_range, FoldMultipleFrames=fold_multiple_frames, UnitX=unit_x)

    output_workspaces.append(output_spec_ws_all)
    output_workspaces.append(output_spec_ws_grouping)
    output_workspaces.append(output_spec_ws_individual)

if diffraction_reduction:
    print("Producing a spectroscopy reduction")
    # If diffonly then cal file and vanadium runs are required for this, else they can be turned off. diffspec also has an optional Rebin in D Spacing option.
    if spectroscopy_reduction:
        reflection = "diffspec"
        output_ws = ISISIndirectDiffractionReduction(InputFiles=input_file_paths, CalFile=calibration_file_path, Instrument=instrument, SpectraRange=diff_spectra_range, OutputWorkspace=f"{{instrument}}{{input_runs[0]}}_diffspec_red")
        output_workspaces.append(output_ws)
    else:
        for run_number in input_runs:
            ws_name = instrument + run_number
            drange_ws = OSIRISDiffractionReduction(Sample=ws_name, CalFile=calibration_file_path, OutputWorkspace=f'{{ws_name}}_dRange')
            q_ws = ConvertUnits(InputWorkspace=drange_ws, OutputWorkspace=f'{{ws_name}}_q', Target='QSquared')
            tof_ws = ConvertUnits(InputWorkspace=drange_ws, OutputWorkspace=f'{{ws_name}}_tof', Target='TOF')
            output_workspaces.append(drange_ws)
            output_workspaces.append(q_ws)
            output_workspaces.append(tof_ws)

for workspace in output_workspaces:
    save_file_name = f"{{output_ws.name()}}.nxs"
    save_path = f"/output/"
    SaveNexusProcessed(workspace, f"{{save_path}}{{save_file_name}}")"""


def test_osiris_transform_spectroscopy():
    """Test spectroscopy transform"""
    reduction = Mock()
    reduction.reduction_inputs = {
        "mode": "spectroscopy",
        "cycle_string": "cycle_1_2",
        "runno": [1, 2, 3],
        "analyser": "002",
        "calibration_file_path": "/some/file.txt",
    }
    script = PreScript(value=SCRIPT)
    OsirisTransform().apply(script, reduction)

    assert script.value == create_expected_script("[1, 2, 3]", "/some/file.txt", "cycle_1_2", "002", True, False)


def test_osiris_transform_diffraction_cycle():
    """Test for diffraction mode"""
    reduction = Mock()
    reduction.reduction_inputs = {
        "mode": "diffraction",
        "cycle_string": "cycle_1_2",
        "runno": 3,
        "analyser": "004",
        "calibration_file_path": "/some/file.txt",
    }
    script = PreScript(value=SCRIPT)
    OsirisTransform().apply(script, reduction)
    assert script.value == create_expected_script("[3]", "/some/file.txt", "cycle_1_2", "004", False, True)
