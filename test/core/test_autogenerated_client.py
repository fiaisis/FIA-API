"""testing autogenerated client"""

from http import HTTPStatus

import pytest
from starlette.testclient import TestClient

from fia_api.fia_api import app
from fia-api-client.fia_api_client import Client
from fia_api_client.api.healthz import get_healthz_get
from fia_api_client.models import MyDataModel
from fia_api_client.api.my_tag import get_my_data_model
from fia_api_client.types import Response
from test.utils import setup_database

start_fia_client = TestClient(app)

# create a client from the autogenerated code for the entire test session:
client = Client(base_url = "localhost:8000")
setup = False

# set up a database with phony data for each test, if it doesn't exist already
@pytest.fixture(autouse=True)
def _setup(faker):
    """
    Setup database pre-testing
    :return:
    """
    # We require this horrible global setup as faker is a function scoped fixture and not a session scoped
    global setup  # noqa: PLW0603
    if not setup:
        setup_database(faker)
        setup = True


def test_jobs_count():
    """
    Test count endpoint for all jobs
    :return:
    """
    response = client.get("/jobs/count")
    assert response.status_code == HTTPStatus.OK
    assert response.json()["count"] == 5001  # noqa: PLR2004


#We need some tests to ensure that autogenerated client code is getting data from FIA API properly

async def test_client_get_healthz():
    # this is more or less straight from fia_api_client README
    #data: MyDataModel = await get_my_data_model.asyncio(client=client)
    #response: Response[MyDataModel] = await get_my_data_model.asyncio_detailed(client=client)

    response = await client.get("/healthz")
    assert response.status_code == HTTPStatus.OK
